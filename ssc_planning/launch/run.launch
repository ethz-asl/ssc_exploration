<launch>  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="large_flat.yaml"/>

  <!--  Evaluation arguments -->  
  <arg name="record_data" default="true"/>
  <arg name="output_directory" default="/home/$USER/output"/>

  <!--  Planner arguments -->  
  <arg name="planner_config_file" default="sc_explorer.yaml"/>

  


  <!-- *** Run the Simulation *** -->
  
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find ssc_planning)/cfg/experiments/$(arg experiment_config)"/>

  <!-- airsim client -->
  <node name="airsim_simulator" pkg="unreal_airsim" type="airsim_simulator_node" required="true"  output="screen" args="-alsologtostderr">
     <rosparam file="$(find ssc_planning)/cfg/simulation/airsim.yaml"/>
     <rosparam file="$(find ssc_planning)/cfg/simulation/pid_controller.yaml"/>
  </node>
  
  <!-- Input data adapter -->
  <node name="ssc_input_adapter" pkg="ssc_mapping" type="ssc_input_adapter.py" required="true" args="-alsologtostderr"  output="screen">
    <remap from="~depth_image" to="/airsim_drone/Depth_cam"/>
  </node>
  
  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find ssc_planning)/cfg/visualization/visualization.rviz"/>
  
  <!-- static camera transform -->
  <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /airsim_camera 100"/>  
  <node pkg="tf" type="static_transform_publisher" name="tf_odom_to_world" args="0 0 0 0 0 0 1 /world /odom 100"/>  
  <node pkg="tf" type="static_transform_publisher" name="tf_mission_to_world" args="0 0 0 0 0 0 1 /mission /world 100"/>  

  <!-- Experiment Manager -->
  <node name="eval_data_node" pkg="ssc_mapping" type="eval_data_node.py" output="screen" required="true" if="$(arg record_data)">
    <remap from="ue_out_in" to="/airsim_drone/RGB_pcl" />
    <remap from="collision" to="/airsim_drone/collision" />
    <param name="ns_planner" value="/planner_node" />
    <param name="ns_voxblox" value="/voxblox_node" />
    <param name="ns_ssc" value="/ssc_node" />
    <param name="delay" value="3.0" />
    <param name="startup_timeout" value="30.0" />
    <param name="evaluate" value="true" />
    <param name="eval_directory" value="$(arg output_directory)" />
    <param name="eval_frequency" value="30" />
    <param name="time_limit" value="15" />
  </node>

    <!-- Voxblox -->
  <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
    <remap from="pointcloud" to="/airsim_drone/RGB_pcl"/>
    <rosparam file="$(find ssc_planning)/cfg/mapper/voxblox.yaml"/>
  </node>

  <!-- SSC Planner -->
  <node name="planner_node" pkg="ssc_planning" type="exploration_planner_node" args="-alsologtostderr" required="true" output="screen" >
      <remap from="planner_node/voxblox_map/esdf_map_in" to="/voxblox_node/esdf_map_out" />
      <remap from="planner_node/voxblox_map/tsdf_map_in" to="/voxblox_node/tsdf_map_out" />      
      <remap from="odometry" to="/airsim_drone/ground_truth/odometry" />
      <remap from="command/trajectory" to="/airsim_drone/command/trajectory" />
      <remap from="command/pose" to="/airsim_drone/command/pose" />
      <remap from="ssc_map/ssc" to="/ssc" /> 
      <remap from="ssc_map/pointcloud" to="/airsim_drone/RGB_pcl" /> <!-- for SC Fusion -->
           
      <rosparam command="load" file="$(find ssc_planning)/cfg/mapper/voxblox.yaml" ns="voxblox_map"/>
      <rosparam command="load" file="$(find ssc_planning)/cfg/planners/baseline.yaml"/>
      <rosparam command="load" file="$(find ssc_planning)/cfg/planners/$(arg planner_config_file)"/>
    </node> 
  
</launch>
